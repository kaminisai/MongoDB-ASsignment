INSERT THE FOLLOWING DOCUMENTS INTO A MOVIES COLLECTION

1) title : Fight Club writer : Chuck Palahniuko year : 1999 actors : [ Brad Pitt Edward Norton ]
db.movies.insert({  title : "Fight Club", writer : "Chuck Palahniuko", year : 1999,  actors : [ "Brad Pitt","Edward Norton" ] })

2) title : Pulp Fiction writer : Quentin Tarantino year : 1994 actors : [ John Travolta Uma Thurman ]
db.movies.insert({title : "Pulp Fiction", writer : "Quentin Tarantino",  year : 1994, actors : [ "John Travolta","Uma Thurman" ] })

3) title : Inglorious Basterds writer : Quentin Tarantino year : 2009 actors : [ Brad Pitt Diane Kruger Eli Roth ]
db.movies.insert({title : "Inglorious Basterds", writer : "Quentin Tarantino",  year : 2009,  actors : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ]})

4)title : The Hobbit: An Unexpected Journey writer : J.R.R. Tolkein year : 2012 franchise : The Hobbit
db.movies.insert({title : "The Hobbit: An Unexpected Journey", writer : "J.R.R. Tolkein",  year : 2012, franchise : "The Hobbit" })

5)title : The Hobbit: The Desolation of Smaug writer : J.R.R. Tolkein
year : 2013
franchise : The Hobbit
db.movies.insert({title : "The Hobbit: The Desolation of Smaug", writer : "J.R.R. Tolkein", year : 2013, franchise : "The Hobbit"})

6)title : The Hobbit: The Battle of the Five Armies
writer : J.R.R. Tolkein
year : 2012
franchise : The Hobbit
synopsis : Bilbo and Company are forced to engage in a war against an array of
combatants and keep the Lonely Mountain from falling into the hands of a rising
darkness
db.movies.insert({title : "The Hobbit: The Battle of the Five Armies", writer : "J.R.R. Tolkein", year : 2012, franchise : "The Hobbit", synopsis : "Bilbo and Company are forced to engage in a war against an array of a rising darkness" })

7)title : Pee Wee Herman's Big Adventure
db.movies.insert({ title : "Pee Wee Herman's Big Adventure" })

8) title : Avatar
db.movies.insert({ title : "Avatar" })

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
QUERY THE MOVIES COLLECTION TO

1) get all documents
db.movies.find()

2) get all documents with writer set to "Quentin Tarantino"
db.movies.find({ writer:"Quentin Tarantino"})

3) get all documents where actors include "Brad Pitt"
db.movies.find( {actors: {$in: ['Brad Pitt']} })

4)get all documents with franchise set to "The Hobbit"
db.movies.find({ franchise:"The Hobbit"})

5)get all movies released in 90's
A)db.movies.find( { $and: [ { year: { $gt: 1980 } }, { year: { $lt: 2000 } } ] } )

6)get all movies released before the year 2000 or after 2010
A)db.movies.find({$or: [{year: {$gt : 2010}}, {year : { $lt: 2000}}]})

------------------------------------------------------------------------------------------------------------------------------
Updating Documents
===================
1)add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit,Bilbo Baggins,
 sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home -
 and the gold within it - from the dragon Smaug."
 A)db.movies.update(
 {title: "The Hobbit: An Unexpected Journey"}, 
 {$set: {synopsis: "A reluctant hobbit, Bilbo 
  Baggins,  sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and 
  the gold within it - from the dragon Smaug."}}
  )  

 2)add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey,
 continue their quest to reclaim Erebor, their homeland, from Smaug. 
 Bilbo Baggins is in possession of a mysterious and magical ring." 
A)db.movies.update(
{title: "The Hobbit: The Desolation of Smaug"}, {$set: {synopsis:"The dwarves, along with
  Bilbo Baggins and Gandalf the Grey, 
  continue their quest to reclaim Erebor,
  their homeland, from Smaug. Bilbo 
  Baggins is in possession of a mysterious and magical ring."}}
  ) 

3)add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
A)db.movies.update(
{title: "Pulp Fiction"}, {$addToSet: {actors: "Samuel L. Jackson"}}
)
------------------------------------------------------------------------------------------------------------------------------
Text Search 
============ 
1) find all movies that have a synopsis that contains the word "Bilbo"
A) db.movies.find({synopsis: {$regex : ".*Bilbo.*"}}).pretty()
  
2) find all movies that have a synopsis that contains the word "Gandalf"
A) db.movies.find({synopsis: {$regex : ".*Gandalf.*"}}).pretty()
 
3)find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
A)db.movies.find({$and:[{synopsis:/Bilbo/},{synopsis: {$not:/Gandalf/}}]}).pretty()  

4)find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
A)db.movies.find({ $or: [{synopsis: {$regex : ".*dwarves.*"}}, {synopsis: {$regex : ".*hobbit.*"}}]}).pretty()
 
5)find all movies that have a synopsis that contains the word "gold" and "dragon"
A)db.movies.find({ $and: [{synopsis: {$regex : ".*gold.*"}}, {synopsis: {$regex : ".*dragon.*"}}]}).pretty() 

----------------------------------------------------------------------------------------------------------------------------
Delete Documents
================

1) delete  the movie "Pee Wee Herman's Big Adventure"?
A) db.movies.remove({"title":"Pee Wee Herman's Big Adventure"})

2. delete the movie "Avatar"?
A)db.movies.remove({"title":"Avatar"})


---------------------------------------------------------------------------------------------------------------------------------

Relationships
==============

Q)Insert the following documents into a users collection?

A) db.users.insert({
"username" : "GoodGuyGreg",
"first_name" : "Good Guy",
"last_name" : "Greg"})


db.users.insert({
"username" : "ScumbagSteve",
"full_name" :{ "first" : "Scumbag",
 "last" : "Steve"}})


Q) Insert the following documents into a posts collection
A)db.posts.insert({
" username" :" GoodGuyGreg",
"title" : "Passes out at party",
"body" : "Wakes up early and cleans house"})

db.posts.insert({
"username" : "GoodGuyGreg",
"title" : "Steals your identity",
"body" : "Raises your credit score"})

db.posts.insert({
"username" : "GoodGuyGreg",
"title" : "Reports a bug in your code",
"body" : "Sends you a Pull Request" })

db.posts.insert({
"username" : "ScumbagSteve",
title : "Borrows something",
body : "Sells it"})

db.posts.insert({
username : "ScumbagSteve",
title : "Borrows everything",
body : "The end"})

db.posts.insert({
username : "ScumbagSteve",
title :" Forks your repo on github",
body : "Sets to private"})

Q)Insert the following documents into a comments collection?
A)

db.comments.insert([ 
 	{ 
	username : "GoodGuyGreg", 
 		comment : "Hope you got a good deal!", 
		post : 4, 
	}, 
	{ 
 		username : "GoodGuyGreg", 
		comment : "What's mine is yours!", 
 		post : 5, 
 	}, 
 	{ 
		username : "GoodGuyGreg", 
		comment : "Don't violate the licensing agreement!", 
		post : 6, 
 	}, 
	{ 
 		username : "ScumbagSteve", 
 		comment : "It still isn't clean", 
 		post : 1, 
 	}, 
 	{ 
		username : "ScumbagSteve", 
		comment : "Denied your PR cause I found a hack", 
		post : 3 
	},

}) 

----------------------------------------------------------------------------------------
Querying related collections
============================

1)find all users?
A)db.users.find().pretty()

2)find all posts?
A)db.posts.find().pretty()

3) find all posts that was authored by "GoodGuyGreg"?
A)db.posts.find({username: "GoodGuyGreg"}).pretty()

4)find all posts that was authored by "ScumbagSteve"
A) db.posts.find({username: "ScumbagSteve"}).pretty()

5)find all comments
A) db.comments.find({}).pretty()

6) find all comments that was authored by "GoodGuyGreg"
A)  db.comments.find({username: "GoodGuyGreg"}).pretty()

7)find all comments that was authored by "ScumbagSteve"
A) db.comments.find({username: "ScumbagSteve"}).pretty()

8)find all comments belonging to the post "Reports a bug in your code"
A)db.comments.find({post: "5d5a8d35b8b3071523e83b17"}).pretty()
			(or)
A)db.comments.find({post: db.posts.findOne({title: "Reports a bug in your code"})._id})
			  

